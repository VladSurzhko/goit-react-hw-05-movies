{"version":3,"file":"static/js/461.a92ddeda.chunk.js","mappings":"4MAEaA,EAAWC,EAAAA,EAAAA,IAAH,wHASRC,EAAmBD,EAAAA,EAAAA,IAAH,2G,SCRhBE,EAAS,WACpB,OACE,SAACH,EAAD,WACI,SAACE,EAAD,WACF,SAAC,KAAD,CACEE,OAAQ,IACRC,MAAO,IACPC,OAAQ,EACRC,MAAM,UACNC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,OAKhB,C,uIClBYC,EAAmBX,EAAAA,GAAAA,QAAH,sHAchBY,GAPQZ,EAAAA,GAAAA,GAAH,0GAOWA,EAAAA,GAAAA,GAAH,6MAcba,EAAab,EAAAA,GAAAA,GAAH,kK,iLCgEVc,EAAcd,EAAAA,EAAAA,MAAH,8HAQXe,EAAcf,EAAAA,EAAAA,MAAH,oIAQXgB,EAAahB,EAAAA,EAAAA,KAAH,2CAIViB,EAAejB,EAAAA,EAAAA,OAAH,sW,mBCrBzB,EAtFe,WACb,OAAsCkB,EAAAA,EAAAA,MAAtC,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAgDN,EAAAA,EAAAA,UAAS,IAAzD,eAAOO,EAAP,KAAyBC,EAAzB,KACA,GAAwCR,EAAAA,EAAAA,WAAS,GAAjD,eAAOS,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WACV,IAAMC,EAAU,mCAAG,+FACXC,EADW,UACCf,EAAYgB,IAAI,oBADjB,QACiC,GADjC,SAIfV,GAAa,GAJE,UAKIW,EAAAA,EAAAA,IAASF,GALb,OAKTG,EALS,OAMfd,EAAUc,EAAKC,SACa,IAAxBD,EAAKC,QAAQC,OACfZ,EAAS,UAAD,OAAWO,EAAX,gBAERP,EAAS,MAVI,kDAafA,EAAS,KAAMa,SAbA,yBAeff,GAAa,GAfE,6EAAH,qDAkBhBQ,GACC,GAAE,CAACd,KAGJa,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRE,EAAS,UAAGf,EAAYgB,IAAI,oBAAnB,QAAmC,GAClDN,EAAoBK,EAErB,GAAE,CAACf,IAEJ,IAIMsB,EAAe,SAAAC,GACnBA,EAAIC,iBACqB,KAArBf,EACFR,EAAe,CAAC,IAEhBW,GAAgB,GAChBX,EAAe,CAAEc,UAAWN,IAE/B,EAQD,OACE,iCACIE,GAAgBJ,IACjB,yBAAG,SAAOE,EAAiB,gBAG3BJ,IAAa,SAACtB,EAAA,EAAD,KACd,UAACc,EAAD,CAAY4B,SAAUH,EAAtB,WACE,SAAC3B,EAAD,UAAa,kBACb,SAACC,EAAD,CACE8B,KAAK,OACLC,MAAOlB,EACPmB,SAhCa,SAAAL,GACnBb,EAAoBa,EAAIM,OAAOF,MAChC,KA+BK,SAAC7B,EAAD,CAAc4B,KAAK,SAASI,QAnBR,WACxBR,EAAa,IAAIS,MAAM,UACxB,EAiBK,SAAwD,cAKzD5B,EAAO6B,KAAI,SAAAC,GAAK,OACf,SAAC,KAAD,WACE,SAAC,KAAD,CAAMC,GAAI,CAAEC,SAAS,WAAD,OAAaF,EAAMG,IAAMC,MAAO,CAAEC,KAAM,YAA5D,SACGL,EAAMM,SAFMN,EAAMG,GADR,MAStB,C","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Pages/Home/Home.styled.jsx","components/Pages/Movies/Movies.styled.jsx","components/Pages/Movies/Movies.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Backdrop = styled.div`\nposition: fixed;\ntop:0;\nleft:0;\nright:0;\nbottom:0;\nbackground-color: rgba(36,36,36, 0.5);\n`\n\nexport const WrapperForLoader = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\ntransform: translate(-50%,-50%)\n`;","import { BallTriangle } from 'react-loader-spinner';\nimport { Backdrop, WrapperForLoader } from \"./Loader.styled\"\n\nexport const Loader = () => {\n  return (\n    <Backdrop>\n        <WrapperForLoader>\n      <BallTriangle\n        height={100}\n        width={100}\n        radius={5}\n        color=\"#6c4da9\"\n        ariaLabel=\"ball-triangle-loading\"\n        wrapperClass={{}}\n        wrapperStyle=\"\"\n        visible={true}\n      />\n      </WrapperForLoader>\n    </Backdrop>\n  );\n};","import styled from 'styled-components';\n\nexport const SectionTopMovies = styled.section`\n  // padding: 20px;\n  // width: 1440px;\n  // margin: 0 auto;\n  // background-color: #fff;\n`;\n\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n  font-size: 40px;\n  font-weight: 700;\n  color: black;\n`;\n\nexport const ListTopMovies = styled.ul`\nlist-style-type: none;\npadding: 0;\nmargin: 0;\n& a {\n  display: inline-block;\n  width: 100%;\n  text-decoration: none;\n  color: grey;\n  &:hover {\n    color: black;\n  }\n}\n`;\nexport const MoviesText = styled.li`\ndisplay: flex;\n  flex-direction: column;\n  gap: 8px;\n  color: black\n  font-size: 18px;\n  font-weight: 600;\n  text-decoration: none;\n`;\n\n// export const Links = styled.div`\n//   display: flex;\n//   flex-direction: column;\n//   gap: 8px;\n//   color: black\n//   font-size: 18px;\n//   font-weight: 600;\n//   text-decoration: none;\n// `;","import styled from \"@emotion/styled\"\n\n\n// export const MoviesWrapper = styled.div`\n//   display: flex;\n// `;\n\n// export const SearchForm = styled.form`\n//   margin-right: 50px;\n// `;\n\n// export const NotFoundContainer = styled.div`\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n// `;\n\n// export const NotFoundMessage = styled.p`\n//   color: red;\n//   font-weight: bold;\n// `;\n\n// export const SearchLabel = styled.label`\n//   display: block;\n//   font-weight: bold;\n//   margin-bottom: 10px;\n// `;\n\n// export const SearchInput = styled.input`\n//   padding: 5px;\n//   padding-left: 24px;\n//   border: 1px solid #ccc;\n//   border-radius: 4px;\n//   font-size: 14px;\n// `;\n\n// export const SearchButton = styled.button`\n//   margin: 12px;\n//   padding: 10px 20px;\n//   font-size: 16px;\n//   background-color: rgb(51, 51, 51);\n//   font-weight: bold;\n//   color: #fff;\n//   border: none;\n//   border-radius: 4px;\n//   cursor: pointer;\n\n//   &:hover {\n//     color: black;\n//     background-color: orange;\n//   }\n\n//   &:focus {\n//     outline: none;\n//     box-shadow: 0 0 0 2px black;\n//   }\n// `;\n\n// export const MovieList = styled.ul`\n//   list-style: none;\n//   width: 100%;\n//   padding: 0;\n//   display: grid;\n//   grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n//   grid-gap: 20px;\n//   & a {\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//     text-decoration: none;\n//     color: grey;\n//     width: 100%;\n//     height: 100%;\n//   }\n// `;\n\n// export const MovieItem = styled.li`\n//   width: 200px;\n//   height: 100px;\n//   background-color: #fff;\n//   padding: 10px;\n//   border-radius: 4px;\n//   box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n//   &:hover {\n//     background-color: orange;\n//     & a {\n//       color: black;\n//     }\n//   }\n// `;\n\n\n\n\nexport const LabelSearch = styled.label`\nmargin-top: 20px;\nmargin-left: 20px;\ndisplay: block;\n  font-weight: bold;\n  margin-bottom: 10px;\n`\n\nexport const InputSearch = styled.input`\npadding: 5px;\n  padding-left: 24px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 14px;\n`\n\nexport const FormSearch = styled.form`\nmargin-top: 20px;\n`\n\nexport const SearchButton = styled.button`\n  margin: 12px;\n  padding: 10px 20px;\n  font-size: 16px;\n  background-color: #00d4ff;\n  color: white;\n  font-weight: bold;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    color: black;\n    background-color: #b7b7bb;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px black;\n  }\n`;\n\n","import { useEffect, useState } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { getMovie } from 'components/Api/Api';\nimport { Loader } from 'components/Loader/Loader';\nimport { FormSearch, InputSearch, LabelSearch, SearchButton } from './Movies.styled'; \nimport { MoviesText } from '../Home/Home.styled';\n\nconst Movies = () => {\n  const [searchMovie, setSearchMovie] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchInputValue, setSearchInputValue] = useState(\"\");\n  const [isInputEmpty, setIsInputEmpty] = useState(true);\n\n  useEffect(() => {\n  const fetchMovie = async () => {\n    const movieName = searchMovie.get('movieName') ?? '';\n    \n    try {\n      setIsLoading(true);\n      const data = await getMovie(movieName);\n      setMovies(data.results);\n      if (data.results.length === 0) {\n        setError(`Movie '${movieName}' not found`);\n      } else {\n        setError(null);\n      }\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  fetchMovie();\n  }, [searchMovie]);\n\n\n  useEffect(() => {\n    const movieName = searchMovie.get('movieName') ?? '';\n    setSearchInputValue(movieName);\n    // fetchMovie();\n  }, [searchMovie]);\n\n  const handleSearch = evt => {\n    setSearchInputValue(evt.target.value);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    if (searchInputValue === '') {\n      setSearchMovie({});\n    } else {\n      setIsInputEmpty(false)\n      setSearchMovie({ movieName: searchInputValue });\n    }\n  };\n\n  const handleButtonClick = () => {\n    handleSubmit(new Event('submit'));\n  };\n\n  \n\n  return (\n    <>\n      {!isInputEmpty && error && (\n       <p>Movie {searchInputValue} not found</p>\n      )}\n\n      {isLoading && <Loader />}\n      <FormSearch onSubmit={handleSubmit}>\n        <LabelSearch>Movie search</LabelSearch>\n        <InputSearch \n          type=\"text\" \n          value={searchInputValue}\n          onChange={handleSearch} />\n        <SearchButton type=\"button\" onClick={handleButtonClick}>\n          Search\n        </SearchButton>\n      </FormSearch>\n\n      {movies.map(movie => (\n        <MoviesText key={movie.id}>\n          <Link to={{ pathname: `/movies/${movie.id}`, state: { from: '/movies' } }}>\n            {movie.title}\n          </Link>\n        </MoviesText>\n      ))}\n    </>\n  );\n};\n\nexport default Movies;\n\n\n// import { useEffect, useState } from 'react';\n// import { Link, useSearchParams, useLocation } from 'react-router-dom';\n// import { getMovie } from 'components/Api/Api'; \n// import { Loader } from 'components/Loader/Loader';\n// import {\n//   MovieList,\n//   MovieItem,\n//   MoviesWrapper,\n//   SearchForm,\n//   SearchLabel,\n//   SearchInput,\n//   NotFoundMessage,\n//   NotFoundContainer,\n//   SearchButton,\n// } from './Movies.styled';\n\n// const Movies = () => {\n//   const [searchMovie, setSearchMovie] = useSearchParams();\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [isInputEmpty, setIsInputEmpty] = useState(true);\n//   const [searchInputValue, setSearchInputValue] = useState('');\n//   const location = useLocation();\n\n//   useEffect(() => {\n//     const fetchMovies = async () => {\n//       const movieName = searchMovie.get('movieName') ?? '';\n\n//       try {\n//         setIsLoading(true);\n//         const data = await getMovie(movieName);\n//         setMovies(data.results);\n//         if (data.results.length === 0) {\n//           setError(`Movie '${movieName}' not found`);\n//         } else {\n//           setError(null);\n//         }\n//         setIsInputEmpty(movieName === '');\n//       } catch (error) {\n//         setError(error.message);\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     };\n\n//     fetchMovies();\n//   }, [searchMovie]);\n\n//   useEffect(() => {\n//     const movieName = searchMovie.get('movieName') ?? '';\n//     setSearchInputValue(movieName);\n//   }, [searchMovie]);\n\n//   const handleSearch = evt => {\n//     setSearchInputValue(evt.target.value);\n//   };\n\n//   const handleSubmit = evt => {\n//     evt.preventDefault();\n//     if (searchInputValue === '') {\n//       setIsInputEmpty(true);\n//       setSearchMovie({});\n//     } else {\n//       setIsInputEmpty(false);\n//       setSearchMovie({ movieName: searchInputValue });\n//     }\n//   };\n\n\n\n\n//   return (\n//     <MoviesWrapper>\n//       {isLoading && <Loader />}\n\n//       <SearchForm onSubmit={handleSubmit}>\n//         <SearchLabel>Movie search</SearchLabel>\n//         <SearchInput\n//           type=\"text\"\n//           value={searchInputValue}\n//           onChange={handleSearch}\n//         />\n//         <SearchButton type=\"submit\">Search</SearchButton>\n//         {!isInputEmpty && error && (\n//           <NotFoundContainer>\n//             <NotFoundMessage>\n//               Movie {searchInputValue} not found\n//             </NotFoundMessage>\n//           </NotFoundContainer>\n//         )}\n//       </SearchForm>\n\n//       <MovieList>\n//         {movies.map(movie => (\n//           <MovieItem key={movie.id}>\n//             <Link to={`${movie.id}`} state={{ from: location }}>\n//               {movie.title}\n//             </Link>\n//           </MovieItem>\n//         ))}\n//       </MovieList>\n//     </MoviesWrapper>\n//   );\n// };\n\n// export default Movies;\n\n\n\n\n// import { useEffect, useState } from 'react';\n// import { Link, useSearchParams, useLocation } from 'react-router-dom';\n// import { getMovie } from 'components/Api/Api';\n// import { Loader } from 'components/Loader/Loader';\n// import { FormSearch, InputSearch, LabelSearch, SearchButton } from './Movies.styled'; \n// import { MoviesText } from '../Home/Home.styled';\n\n// const Movies = () => {\n//   const [searchMovie, setSearchMovie] = useSearchParams();\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [ setError] = useState(null);\n//   const [searchInputValue, setSearchInputValue] = useState(\"\");\n//   const location = useLocation();\n\n//   useEffect(() => {\n//     const fetchMovies = async () => {\n//       const movieName = searchMovie.get('movieName') ?? '';\n\n//       try {\n//         setIsLoading(true);\n//         const data = await getMovie(movieName);\n//         setMovies(data.results);\n//         if (data.results.length === 0) {\n//           setError(`Movie '${movieName}' not found`);\n//         } else {\n//           setError(null);\n//         }\n//         // setIsInputEmpty(movieName === '');\n//       } catch (error) {\n//         setError(error.message);\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     };\n\n//     fetchMovies();\n//   }, [searchMovie]);\n \n//   // const fetchMovie = async () => {\n//   //   const movieName = searchMovie.get('movieName') ?? '';\n    \n//   //   try {\n//   //     setIsLoading(true);\n//   //     const data = await getMovie(movieName);\n//   //     setMovies(data.results);\n//   //     if (data.results.length === 0) {\n//   //       setError(`Movie '${movieName}' not found`);\n//   //     } else {\n//   //       setError(null);\n//   //     }\n//   //   } catch (error) {\n//   //     setError(error.message);\n//   //   } finally {\n//   //     setIsLoading(false);\n//   //   }\n//   // };\n  \n//   // fetchMovie();\n//   //  }, [searchMovie])\n\n\n//   const handleSearch = evt => {\n//     setSearchInputValue(evt.target.value);\n//   };\n\n//   const handleSubmit = evt => {\n//     evt.preventDefault();\n//     if (searchInputValue === '') {\n//       setSearchMovie({});\n//     } else {\n//       setSearchMovie({ movieName: searchInputValue });\n//     }\n//   };\n\n//   const handleButtonClick = () => {\n//     handleSubmit(new Event('submit'));\n//   };\n\n//   useEffect(() => {\n//     const movieName = searchMovie.get('movieName') ?? '';\n//     setSearchInputValue(movieName);\n//     // fetchMovie();\n//   }, [searchMovie]);\n\n//   return (\n//     <>\n//       {/* {!searchInputValue && error && (\n//        <p>Movie {searchInputValue} not found</p>\n//       )} */}\n\n//       {isLoading && <Loader />}\n//       <FormSearch onSubmit={handleSubmit}>\n//         <LabelSearch>Movie search</LabelSearch>\n//         <InputSearch \n//           type=\"text\" \n//           value={searchInputValue}\n//           onChange={handleSearch} />\n//         <SearchButton type=\"button\" onClick={handleButtonClick}>\n//           Search\n//         </SearchButton>\n//       </FormSearch>\n\n//       {movies.map(movie => (\n//         <MoviesText key={movie.id}>\n//           <Link to={{ pathname: `/movies/${movie.id}`, state: { from: location } }}>\n//             {movie.title}\n//           </Link>\n//         </MoviesText>\n//       ))}\n//     </>\n//   );\n//   }\n\n// export default Movies;\n\n\n\n\n\n// import { useEffect, useState } from 'react';\n// import { Link, useSearchParams } from 'react-router-dom';\n// import { getMovie } from 'components/Api/Api';\n// import { Loader } from 'components/Loader/Loader';\n// import { FormSearch, InputSearch, LabelSearch, SearchButton } from './Movies.styled';\n// import { MoviesText } from '../Home/Home.styled';\n\n// const Movies = () => {\n//   const [searchMovie, setSearchMovie] = useSearchParams();\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   // const movieName = searchMovie.get('movieName') ?? '';\n//   const [isInputEmpty, setIsInputEmpty] = useState(true);\n//   const [searchInputValue, setSearchInputValue] = useState(\"\")\n\n\n//   useEffect(() => {\n\n//         const fetchMovie = async () => {\n//           const movieName = searchMovie.get('movieName') ?? '';\n          \n//           try {\n//             setIsLoading(true);\n//             const data = await getMovie(movieName);\n//             setMovies(data.results);\n//             if (data.results.length === 0) {\n//               setError(`Movie '${movieName}' not found`);\n//             } else {\n//               setError(null);\n//             }\n//             setIsInputEmpty(movieName === \"\")\n//           } catch (error) {\n//             setError(error.message);\n//           } finally {\n//             setIsLoading(false);\n//           }\n//         };\n\n//         const handleSearch = evt => {\n//           setSearchInputValue(evt.target.value);\n//         };\n\n//         // fetchMovie();\n//         // }, [searchMovie]);\n    \n//       //   if (!isInputEmpty) {\n//       //     fetchMovie();\n//       //   }\n//       // }, [isInputEmpty, movieName]);\n\n      \n\n//   // const handleSearch = evt => {\n//   //   const movieNameValue = evt.target.value;\n//   //   if (movieNameValue === '') {\n//   //     return setSearchMovie({});\n//   //   }\n//   //   setSearchMovie({ movieName: movieNameValue });\n//   //   setIsInputEmpty(false);\n//   // };\n\n//   const handleButtonClick = () => {\n//     handleSubmit(new Event('submit'));\n//   };\n\n//   useEffect(() => {\n//     const movieName = searchMovie.get('movieName') ?? '';\n//     setSearchInputValue(movieName);\n//   }, [searchMovie]);\n\n//   // const handleSearch = evt => {\n//   //       setSearchInputValue(evt.target.value);\n//   //     };\n\n//   const handleSubmit = evt => {\n//     evt.preventDefault();\n//     if (searchInputValue === '') {\n//       setIsInputEmpty(true);\n//       setSearchMovie({});\n//     } else {\n//       setIsInputEmpty(false);\n//       setSearchMovie({ movieName: searchInputValue });\n//     }\n//   };\n\n//   return (\n//     <>\n//       {!isInputEmpty && error && (\n//        <p>Movie {searchInputValue} not found</p>\n//       )}\n\n//       {isLoading && <Loader />}\n//       <FormSearch onSubmit={handleSubmit}>\n//       <LabelSearch>Movie search</LabelSearch>\n//         <InputSearch \n//         type=\"text\" \n//         value={handleSearch}\n//         onChange={handleSearch} />\n        \n//       </FormSearch>\n\n//       <SearchButton type=\"button\" onClick={handleButtonClick}>\n//           Search\n//         </SearchButton>\n\n//       {movies.map(movie => (\n//         <MoviesText key={movie.id}>\n//           <Link to={`/movies/${movie.id}`} state={{}}>\n//             {movie.title}\n//           </Link>\n//         </MoviesText>\n//       ))}\n//     </>\n//   );\n// })}\n\n// export default Movies;\n\n\n\n\n\n"],"names":["Backdrop","styled","WrapperForLoader","Loader","height","width","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","SectionTopMovies","ListTopMovies","MoviesText","LabelSearch","InputSearch","FormSearch","SearchButton","useSearchParams","searchMovie","setSearchMovie","useState","movies","setMovies","isLoading","setIsLoading","error","setError","searchInputValue","setSearchInputValue","isInputEmpty","setIsInputEmpty","useEffect","fetchMovie","movieName","get","getMovie","data","results","length","message","handleSubmit","evt","preventDefault","onSubmit","type","value","onChange","target","onClick","Event","map","movie","to","pathname","id","state","from","title"],"sourceRoot":""}