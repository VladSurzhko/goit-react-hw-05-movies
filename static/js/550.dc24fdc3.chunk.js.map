{"version":3,"file":"static/js/550.dc24fdc3.chunk.js","mappings":"yMAEaA,EAAWC,EAAAA,EAAAA,IAAH,wHASRC,EAAmBD,EAAAA,EAAAA,IAAH,2G,SCRhBE,EAAS,WACpB,OACE,SAACH,EAAD,WACI,SAACE,EAAD,WACF,SAAC,KAAD,CACEE,OAAQ,IACRC,MAAO,IACPC,OAAQ,EACRC,MAAM,UACNC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,OAKhB,C,iHCiID,UAtDe,WAAO,IAAD,EACnB,GAAsCC,EAAAA,EAAAA,MAAtC,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACMC,EAAS,UAAGT,EAAYU,IAAI,oBAAnB,QAAmC,IAElDC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,oGAEfN,GAAa,GAFE,UAGIO,EAAAA,EAAAA,IAASJ,GAHb,OAGTK,EAHS,OAIfV,EAAUU,EAAKC,SAJA,gDAMfP,EAAS,KAAMQ,SANA,yBAQfV,GAAa,GARE,4EAAH,qDAYhBM,GACD,GAAE,CAACH,IAUJ,OACE,gCACGF,IAAS,yBAAG,SAAOE,EAAU,gBAC7BJ,IAAa,SAAC,IAAD,KACd,6BACE,kBACAY,KAAK,OACLC,MAAOT,EACPU,SAhBe,SAAAC,GACnB,IAAMC,EAAiBD,EAAIE,OAAOJ,MAClC,GAAuB,KAAnBG,EACF,OAAOpB,EAAe,CAAC,GAEzBA,EAAe,CAAEQ,UAAWY,GAC7B,KAWK,2BAAO,oBAGRlB,EAAOoB,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAC,EAAzC,SACGH,EAAMI,SAFFJ,EAAME,GADA,MAStB,C","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Pages/Movies/Movies.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Backdrop = styled.div`\nposition: fixed;\ntop:0;\nleft:0;\nright:0;\nbottom:0;\nbackground-color: rgba(36,36,36, 0.5);\n`\n\nexport const WrapperForLoader = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\ntransform: translate(-50%,-50%)\n`;","import { BallTriangle } from 'react-loader-spinner';\nimport { Backdrop, WrapperForLoader } from \"./Loader.styled\"\n\nexport const Loader = () => {\n  return (\n    <Backdrop>\n        <WrapperForLoader>\n      <BallTriangle\n        height={100}\n        width={100}\n        radius={5}\n        color=\"#6c4da9\"\n        ariaLabel=\"ball-triangle-loading\"\n        wrapperClass={{}}\n        wrapperStyle=\"\"\n        visible={true}\n      />\n      </WrapperForLoader>\n    </Backdrop>\n  );\n};","// import { useEffect, useState } from 'react';\n// import { Link, useSearchParams, useLocation } from 'react-router-dom';\n// import { getMovie } from 'components/Api/Api';\n// import { Loader } from 'components/Loader/Loader';\n// import {\n//   MovieList,\n//   MovieItem,\n//   MoviesWrapper,\n//   SearchForm,\n//   SearchLabel,\n//   SearchInput,\n//   NotFoundMessage,\n//   NotFoundContainer,\n// } from './Movies.styled';\n\n// const Movies = () => {\n//   const [searchMovie, setSearchMovie] = useSearchParams();\n//   const [movies, setMovie] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [isInputEmpty, setIsInputEmpty] = useState(true);\n//   const movieName = searchMovie.get('movieName') ?? '';\n//   const location = useLocation();\n\n//   useEffect(() => {\n//     const fetchMovie = async () => {\n//       try {\n//         setIsLoading(true);\n//         const data = await getMovie(movieName);\n//         setMovie(data.results);\n//         if (data.results.length === 0) {\n//           setError(`Movie '${movieName}' not found`);\n//         } else {\n//           setError(null);\n//         }\n//       } catch (error) {\n//         setError(error.message);\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     };\n\n//     if (!isInputEmpty) {\n//       fetchMovie();\n//     }\n//   }, [isInputEmpty, movieName]);\n\n//   const handleSearch = evt => {\n//     const movieNameValue = evt.target.value;\n//     if (movieNameValue === '') {\n//       return setSearchMovie({});\n//     }\n//     setSearchMovie({ movieName: movieNameValue });\n//     setIsInputEmpty(false);\n//   };\n\n//   return (\n//     <MoviesWrapper>\n//       {isLoading && <Loader />}\n\n//       <SearchForm>\n//         <SearchLabel>Movie search</SearchLabel>\n//         <SearchInput type=\"text\" value={movieName} onChange={handleSearch} />\n//         {!isInputEmpty && error && (\n//           <NotFoundContainer>\n//             <NotFoundMessage>Movie {movieName} not found</NotFoundMessage>\n//           </NotFoundContainer>\n//         )}\n//       </SearchForm>\n\n//       <MovieList>\n//         {movies.map(movie => (\n//           <MovieItem key={movie.id}>\n//             <Link to={`${movie.id}`} state={{ from: location }}>\n//               {movie.title}\n//             </Link>\n//           </MovieItem>\n//         ))}\n//       </MovieList>\n//     </MoviesWrapper>\n//   );\n// };\n\n// export default Movies;\n\n\n\n\n\n\nimport { useEffect, useState } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { getMovie } from 'components/Api/Api';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [searchMovie, setSearchMovie] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const movieName = searchMovie.get('movieName') ?? '';\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setIsLoading(true);\n        const data = await getMovie(movieName);\n        setMovies(data.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovie();\n  }, [movieName]);\n\n  const handleSearch = evt => {\n    const movieNameValue = evt.target.value;\n    if (movieNameValue === '') {\n      return setSearchMovie({});\n    }\n    setSearchMovie({ movieName: movieNameValue });\n  };\n\n  return (\n    <>\n      {error && <p>Movie {movieName} not found</p>}\n      {isLoading && <Loader />}\n      <form>\n        <input \n        type=\"text\" \n        value={movieName}\n        onChange={handleSearch} />\n        <label>Movie search</label>\n      </form>\n\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{}}>\n            {movie.title}\n          </Link>\n        </li>\n      ))}\n    </>\n  );\n};\n\nexport default Movies;\n\n\n\n\n\n"],"names":["Backdrop","styled","WrapperForLoader","Loader","height","width","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","useSearchParams","searchMovie","setSearchMovie","useState","movies","setMovies","isLoading","setIsLoading","error","setError","movieName","get","useEffect","fetchMovie","getMovie","data","results","message","type","value","onChange","evt","movieNameValue","target","map","movie","to","id","state","title"],"sourceRoot":""}